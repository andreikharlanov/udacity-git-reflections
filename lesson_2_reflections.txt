What happens when you initialize a repository? Why do you need to do it?
Git starts to monitor the directory for the changes in files.
I need to do it so I can make a commit when I'd like to.

How is the staging area different from the working directory and the repository? What value do you think it offers?
Staging area is a middle ground between the working directory and the repository.
It may contain only some parts of the changes in files currently stored in working directory.
And all of the changes that the staging area contain will be part of the repository after the commit.

How can you use the staging area to make sure you have one commit per logical change?
I can put only the files that are relevant to the current logical change and make a commit only with these files.
If there were no staging area it would be impossible, because I'd need to commit all changes, and some of them would be irrelevant for the current logical change.
So if it were the case, you'd need to work only on a one logical change at a time if you'd like your commits to be logical.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
When I want to make a new version of my program, but I'm not sure I will keep it.
Then I can threat this version as an experiment and discard changes if I don't like them.
Also branches are helpful when I need to fix bugs in my main version and develop a new one at the same time.

How do the diagrams help you visualize the branch structure?
They help to understand how different commits relate to each other.
And the diagrams help to see the reachability of the git log command.
And they help and to see when new branches were created.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Tip of the branch is pointing to the last commit introduced in one of the merged branches.
All commits in the merged branches now are reachable with the 'log' command for the current branch.
All commits from the merged branches are sorted by time when you run a 'log' command in the current branch.
All changes introduced after the branches became separate are reflected in the current state of the files.
We represent them in the diagram the way we do, because all of them can be reached from the current branch, but they where made in different branches.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Pro: it's much faster to let Git make an automatic merge if there are no conflicts then to manually do it every time.
Con: if you do merges manualy, there can be more undestanding of the changes that were made.
